Чтобы ответить на ваш вопрос:

/dist означает «распространяемый», скомпилированный код / ??библиотека.
Структура папки зависит от системы сборки и языка программирования. Вот несколько стандартных соглашений:

src/: "исходные" файлы для сборки и развития проекта. Здесь находятся исходные исходные файлы, прежде чем они будут скомпилированы в меньшее количество файлов в dist/, public/или build/.
dist/: "distribution", скомпилированный код / ??библиотека, также называемая public/или build/. Здесь обычно находятся файлы, предназначенные для производственного или публичного использования.
assets/: статический контент, такой как изображения, видео, аудио, шрифты и т. д.
lib/: внешние зависимости (если включены напрямую).
test/: скрипты тестов проекта, mocks и т. д.
node_modules/: включает библиотеки и зависимости для пакетов JS, используемых Npm.
vendor/: включает библиотеки и зависимости для пакетов PHP, используемых Composer.
bin/: файлы, которые добавляются в ваш PATH при установке.
Уценка / текстовые файлы:

README.md: Файл справки, в котором рассматриваются настройки, руководства и документация по проекту. README.txtтакже используется.
LICENSE.md: любые права, данные вам в отношении проекта. LICENSEили LICENSE.txtявляются вариациями имени файла лицензии, имеющими такое же содержимое.
CONTRIBUTING.md: как помочь с проектом. Иногда об этом говорится в README.mdфайле.
Конкретные (они могут продолжаться вечно):

package.json: определяет библиотеки и зависимости для пакетов JS, используемых Npm.
package-lock.json: конкретная блокировка версии для установленных зависимостей package.json, используемых Npm.
composer.json: определяет библиотеки и зависимости для пакетов PHP, используемых Composer.
composer.lock: конкретная блокировка версии для установленных зависимостей composer.json, используемых Composer.
gulpfile.js: используется для определения функций и задач, запускаемых с помощью Gulp.
.travis.yml: config для среды Travis CI .
.gitignore: Спецификация файлов, которые Git должен игнорировать .